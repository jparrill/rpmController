#!/usr/bin/env python

import sys
import argparse
from os import path
sys.path.append("../lib")
from rpmController import rpm_api, mongo_api, comparer

def call_all():
  rpms = rpm_api.Info()
  comp = comparer.Comparer()
  mongo = mongo_api.Info()
  return rpms, comp, mongo

def check_all():
  rpms, comp, mongo = call_all()
  info_host = {}
  packages = []
  info_host, packages = rpms.catcher()

  print "- Checking database for New RPMs"
  mongo_packages = mongo.get_packages(comp.formatter(info_host['fqdn']))
  merged_packages, updates = comp.merger(packages, mongo_packages, 'rpm', comp.formatter(info_host['fqdn']))

  if merged_packages != [] and updates == 0:
    ## Here we can log this entries for the following of the node ;)
    mongo.collection_maker(comp.formatter(info_host['fqdn']), info_host, merged_packages)

  elif updates > 0:
    print "- Number of Updates in MongoDB: %d" % updates

  else:
    print "- There is not new RPMs in the Node"

  print "- Checking database for Deleted RPMs"
  updates = comp.merger(packages, mongo_packages, 'mongo', comp.formatter(info_host['fqdn']))

  if updates > 0:
    print "- Number of Updates in MongoDB: %d" % updates
  else:
    print "- There is not RPMs erased in the Node"




## Arguments
parser = argparse.ArgumentParser(prog='rpmController')
parser.add_argument("-f", '--find', help="Pattern to search in MongoDB", type=str, metavar="pattern")
parser.add_argument("-c", '--check', help="Check if there are new rpms in node", default=True, action='store_true')
#parser.add_argument("--debug", help="Increase output verbosity")
parser.add_argument('--version', action='version', version='%(prog)s 0.1')
args = parser.parse_args()


if args.check and not args.find:
  check_all()

elif:
  args.find()

else:
  print "Method in construction..."